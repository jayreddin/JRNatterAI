<!--
File: Auth/signIn.md
-->

Initiates the sign in process for the user. This will open a popup window with the appropriate authentication method. Puter automatically handles the authentication process and will resolve the promise when the user has signed in.

It is important to note that all essential methods in Puter handle authentication automatically. This method is only necessary if you want to handle authentication manually, for example if you want to build your own custom authentication flow.

## Syntax

```js
puter.auth.signIn();
```

## Parameters

None

## Return value

A `Promise` that will resolve to `true` when the user has signed in. The promise will never reject.

## Example

```html;auth-sign-in
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <button id="sign-in">Sign in</button>
    <script>
        // Because signIn() opens a popup window, it must be called from a user action.
        document.getElementById('sign-in').addEventListener('click', async () => {
            // signIn() will resolve when the user has signed in.
            await puter.auth.signIn().then((res) => {
                puter.print('Signed in<br>' + JSON.stringify(res));
            });
        });
    </script>
</body>
</html>
```


<!--
File: Auth/signOut.md
-->

Signs the user out of the application.


## Syntx

```js
puter.auth.signOut();
```

## Parameters

None

## Return value

None

## Example

```html;auth-sign-out
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        puter.auth.signOut();
    </script>
</body>
</html>
```


<!--
File: Drivers/call.md
-->

A low-level function that allows you to call any driver on any interface. This function is useful when you want to call a driver that is not directly exposed by Puter.js's high-level API or for when you need more control over the driver call.

## Syntax
```js
puter.drivers.call(interface, driver, method)
puter.drivers.call(interface, driver, method, args = {})
```

## Parameters
#### `interface` (String) (Required)
The name of the interface you want to call.

#### `driver` (String) (Required)
The name of the driver you want to call.

#### `method` (String) (Required)
The name of the method you want to call on the driver.

#### `args` (Array) (Optional)
An object containing the arguments you want to pass to the driver.

## Return value

A `Promise` that will resolve to the result of the driver call. The result can be of any type, depending on the driver you are calling.

In case of an error, the `Promise` will reject with an error message.


<!--
File: FS/copy.md
-->

Copies a file or directory from one location to another. 

## Syntax

```js
puter.fs.copy(source, destination)
puter.fs.copy(source, destination, options)
```

## Parameters
#### `source` (String) (Required)
The path to the file or directory to copy.

#### `destination` (String) (Required)
The path to the destination directory. If destination is a directory then the file or directory will be copied into that directory using the same name as the source file or directory. If the destination is a file, we overwrite if overwrite is `true`, otherwise we error.

#### `options` (Object) (Optional)
The options for the `copy` operation. The following options are supported:
- `overwrite` (Boolean) - Whether to overwrite the destination file or directory if it already exists. Defaults to `false`.
- `dedupeName` (Boolean) - Whether to deduplicate the file or directory name if it already exists. Defaults to `false`.
- `newName` (String) - The new name to use for the copied file or directory. Defaults to `undefined`.


## Return value
A `Promise` that will resolve to the copied file or directory. If the source file or directory does not exist, the promise will be rejected with an error.

## Examples

<strong class="example-title"> Copy a file</strong>

```html;fs-copy
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
    (async () => {
        // (1) Create a random text file
        let filename = puter.randName() + '.txt';
        await puter.fs.write(filename, 'Hello, world!');
        puter.print(`Created file: "${filename}"<br>`);

        // (2) create a random directory
        let dirname = puter.randName();
        await puter.fs.mkdir(dirname);
        puter.print(`Created directory: "${dirname}"<br>`);

        // (3) Copy the file into the directory
        puter.fs.copy(filename, dirname).then((file)=>{
            puter.print(`Copied file: "${filename}" to directory "${dirname}"<br>`);
        }).catch((error)=>{
            puter.print(`Error copying file: "${error}"<br>`);
        });
    })()
    </script>
</body>
</html>
```