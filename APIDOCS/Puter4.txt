### puter.threads.edit

Updates the content of an existing thread.

#### Syntax

```js
puter.threads.edit(uuid, content);
```

#### Parameters

##### `uuid` (string) (required)

The UUID of the thread to edit.

##### `content` (any) (required)

The new content to store in the thread.

#### Return value

An object containing information about the updated thread:

```js
{
  uuid: string,       // The UUID of the thread
  content: any,       // The updated content stored in the thread
  parent_uuid: string // The UUID of the parent thread (if applicable)
}
```

#### Permissions Required

The current actor needs the `thread:UUID-OF-THREAD:edit` permission to edit the thread, unless they are the owner.

#### Example

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        puter.threads.edit('550e8400-e29b-41d4-a716-446655440000', "Updated thread content")
            .then(updatedThread => {
                console.log("Thread updated:", updatedThread);
            })
            .catch(error => {
                console.error("Error updating thread:", error);
            });
    </script>
</body>
</html>
```

### puter.threads.delete

Deletes a thread and optionally its child threads.

#### Syntax

```js
puter.threads.delete(uuid, options);
```

#### Parameters

##### `uuid` (string) (required)

The UUID of the thread to delete.

##### `options` (object) (optional)

An object containing the following properties:

- `recursive` (boolean) (optional): If set to `true`, deletes all child threads recursively. Default is `false`.

#### Return value

An empty object (reserved for future use).

#### Permissions Required

The current actor needs the `thread:UUID-OF-THREAD:delete` permission to delete the thread, unless they are the owner.

To delete child threads recursively, the actor needs either:
- `thread:UUID-OF-THREAD:children-of:delete` permission (to delete any child thread)
- `thread:UUID-OF-THREAD:own-children-of:delete` permission (to delete only child threads they own)

#### Example

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // Delete a single thread
        puter.threads.delete('550e8400-e29b-41d4-a716-446655440000')
            .then(() => {
                console.log("Thread deleted successfully");
            })
            .catch(error => {
                console.error("Error deleting thread:", error);
            });

        // Delete a thread and all its children
        puter.threads.delete('550e8400-e29b-41d4-a716-446655440000', { recursive: true })
            .then(() => {
                console.log("Thread and all children deleted successfully");
            })
            .catch(error => {
                console.error("Error deleting thread hierarchy:", error);
            });
    </script>
</body>
</html>
```

### puter.threads.list

Lists all child threads of a given parent thread.

#### Syntax

```js
puter.threads.list(parent_uuid, options);
```

#### Parameters

##### `parent_uuid` (string) (required)

The UUID of the parent thread whose children should be listed.

##### `options` (object) (optional)

An object containing the following properties:

- `limit` (number) (optional): Maximum number of threads to return. Default is server-defined.
- `offset` (number) (optional): Number of threads to skip. Used for pagination. Default is 0.

#### Return value

An array of objects, each containing information about a child thread:

```js
[
  {
    uuid: string,       // The UUID of the child thread
    content: any,       // The content stored in the child thread
    parent_uuid: string // The UUID of the parent thread
  },
  // ...more thread objects
]
```

#### Permissions Required

The current actor needs the `thread:UUID-OF-PARENT:list` permission to list child threads, unless they are the owner.

#### Example

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        puter.threads.list('550e8400-e29b-41d4-a716-446655440000', { limit: 10 })
            .then(childThreads => {
                console.log("Child threads:", childThreads);
            })
            .catch(error => {
                console.error("Error listing threads:", error);
            });
    </script>
</body>
</html>
```

### puter.threads.subscribe

Subscribes to events on a specific thread.

#### Syntax

```js
puter.threads.subscribe(uuid, options, callback);
```

#### Parameters

##### `uuid` (string) (required)

The UUID of the thread to subscribe to.

##### `options` (object) (optional)

An object containing subscription options:

- `events` (array) (optional): Array of event names to subscribe to. Default is all events.
  Possible events:
  - `post`: Emitted when a child thread is added
  - `edit`: Emitted when this thread is edited
  - `delete`: Emitted when this thread is deleted
  - `child-edit`: Emitted when a direct child thread is edited
  - `child-delete`: Emitted when a direct child thread is deleted

##### `callback` (function) (required)

Function to be called when a subscribed event occurs. The callback receives an event object:

```js
{
  type: string,        // The type of event ('post', 'edit', 'delete', 'child-edit', 'child-delete')
  thread: {            // The thread that triggered the event
    uuid: string,      // The UUID of the thread
    content: any,      // The content of the thread
    parent_uuid: string // The UUID of the parent thread (if applicable)
  }
}
```

#### Return value

A subscription object with methods:

```js
{
  unsubscribe: function // Call this function to stop receiving events
}
```

#### Permissions Required

The current actor needs the appropriate read permissions for the thread to subscribe to its events.

#### Example

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // Subscribe to all events on a thread
        const subscription = puter.threads.subscribe(
            '550e8400-e29b-41d4-a716-446655440000',
            { events: ['post', 'edit', 'delete', 'child-edit', 'child-delete'] },
            function(event) {
                console.log("Event received:", event.type);
                console.log("Thread data:", event.thread);
            }
        );
    </script>
</body>
</html>
```

## Permissions

Thread operations are controlled by the following permissions:

| Permission | Description |
|------------|-------------|
| `thread:UUID:post` | Allows adding child threads to the specified thread |
| `thread:UUID:list` | Allows listing child threads of the specified thread |
| `thread:UUID:read` | Allows reading the contents of the specified thread |
| `thread:UUID:edit` | Allows editing the contents of the specified thread |
| `thread:UUID:delete` | Allows deleting the specified thread |
| `thread:UUID:children-of:delete` | Allows deleting any child thread of the specified thread |
| `thread:UUID:own-children-of:delete` | Allows deleting any child thread of the specified thread that is owned by the current actor |
| `thread:UUID:children-of:edit` | Allows editing any child thread of the specified thread |
| `thread:UUID:own-children-of:edit` | Allows editing any child thread of the specified thread that is owned by the current actor |

**Note**: Thread owners automatically have all permissions for their own threads.

<!--
File: UI/alert.md
-->


Displays an alert dialog by Puter. Puter improves upon the traditional browser alerts by providing more flexibility. For example, you can customize the buttons displayed.

`puter.ui.alert()` will block the parent window until user responds by pressing a button.

## Syntax
```js
puter.ui.alert(message)
puter.ui.alert(message, buttons)
```

## Parameters

#### `message` (optional)
A string to be displayed in the alert dialog. If not set, the dialog will be empty. 

#### `buttons` (optional)
An array of objects that define the buttons to be displayed in the alert dialog. Each object must have a `label` property. The `value` property is optional. If it is not set, the `label` property will be used as the value. The `type` property is optional and can be set to `primary`, `success`, `info`, `warning`, or `danger`. If it is not set, the default type will be used.


## Return value 
A `Promise` that resolves to the value of the button pressed. If the `value` property of button is set it is returned, otherwise `label` property will be returned.

## Examples
```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // display an alert with a message and three different types of buttons
        puter.ui.alert('Please press a button!', [
            {
                label: 'Hello :)',
                value: 'hello',
                type: 'primary',
            },
            {
                label: 'Bye :(',
                type: 'danger',
            },
            {
                label: 'Cancel',
            },
        ]).then((resp) => {
            // print user's response to console
            console.log(resp);
        });
    </script>
</body>
</html>
```

<!--
File: UI/authenticateWithPuter.md
-->

Presents a dialog to the user to authenticate with their Puter account.

## Syntax

```js
puter.ui.authenticateWithPuter()
```

## Parameters
None.

## Return value
A `Promise` that will resolve to `true`. If the user cancels the dialog, the promise will be rejected with an error.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // Presents a dialog to the user to authenticate with their Puter account.
        puter.ui.authenticateWithPuter().then((user)=>{
            console.log(user)
        });
    </script>
</body>
</html>
```

<!--
File: UI/createWindow.md
-->

Creates and displays a window.

## Syntax
```js
puter.ui.createWindow()
puter.ui.createWindow(options)
```

## Parameters

#### `options` (optional)
A set of key/value pairs that configure the window.

* `center` (Boolean): if set to `true`, window will be placed at the center of the screen.
* `content` (String): content of the window.
* `disable_parent_window` (Boolean): if set to `true`, the parent window will be blocked until current window is closed. 
* `has_head` (Boolean): if set to `true`, window will have a head which contains the icon and close, minimize, and maximize buttons.
* `height` (Float): height of window in pixels.
* `is_resizable` (Boolean): if set to `true`, user will be able to resize the window.
* `show_in_taskbar` (Boolean): if set to `true`, window will be represented in the taskbar.
* `title` (String): title of the window.
* `width` (Float): width of window in pixels.

## Examples
```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // create the window
        puter.ui.createWindow({
            title: 'Cool Title',
            content: `<h1 style="text-align:center;">My little test window!</h1>`, 
            disable_parent_window: true,
            width: 300,
            height: 300,
            is_resizable: false,
            has_head: true,
            center: true,
            show_in_taskbar: false,
        })
    </script>
</body>
</html>
```

<!--
File: UI/exit.md
-->

Will terminate the running application and close its window.

## Syntax
```js
puter.exit()
```

## Parameters
`puter.exit()` does not accept any parameters.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <button id="exit-button">Exit App</button>
    <script>
        const exit_button = document.getElementById('exit-button');
        exit_button.addEventListener('click', () => {
            puter.exit();
        });
    </script>
</body>
</html>
```


<!--
File: UI/launchApp.md
-->

Allows you to dynamically launch another app from within your app.

## Syntax
```js
puter.ui.launchApp()
puter.ui.launchApp(appName)
puter.ui.launchApp(appName, args)
puter.ui.launchApp(args)
```

## Parameters
#### `appName` (String)
Name of the app. If not provided, a new instance of the current app will be launched.

#### `args` (Object)
Arguments to pass to the app. If `appName` is not provided, these arguments will be passed to the current app.

## Return value 
A `Promise` that will resolve to an [`AppConnection`](/Objects/AppConnection) once the app is launched.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // launches the Editor app
        puter.ui.launchApp('editor');
    </script>
</body>
</html>
```


<!--
File: UI/on.md
-->

Listen to broadcast events from Puter. If the broadcast was received before attaching the handler, then the handler is called immediately with the most recent value.


## Syntax
```js
puter.ui.on(eventName, handler)
```

## Parameters

#### `eventName` (String)
Name of the event to listen to.

#### `handler` (Function)
Callback function run when the broadcast event is received.

## Broadcasts
Possible broadcasts are:

#### `localeChanged`
Sent on app startup, and whenever the user's locale on Puter is changed. The value passed to `handler` is:
```js
{
    language, // (String) Language identifier, such as 'en' or 'pt-BR'
}
```

#### `themeChanged`
Sent on app startup, and whenever the user's desktop theme on Puter is changed. The value passed to `handler` is:
```js
{
    palette: {
        primaryHue,         // (Float) Hue of the theme color
        primarySaturation,  // (String) Saturation of the theme color as a percentage, with % sign
        primaryLightness,   // (String) Lightness of the theme color as a percentage, with % sign
        primaryAlpha,       // (Float) Opacity of the theme color from 0 to 1
        primaryColor,       // (String) CSS color value for text
    }
}
```

## Examples

```html
<html>
<body>
<script src="https://js.puter.com/v2/"></script>
<script>
    puter.ui.on('localeChanged', function(locale) {
        alert(`User's preferred language code is: ${locale.language}!`);
    })
</script>
</body>
</html>
```


<!--
File: UI/onItemsOpened.md
-->

Specify a function to execute when the one or more items have been opened. Items can be opened via a variety of methods such as: drag and dropping onto the app, double-clicking on an item, right-clicking on an item and choosing an app from the 'Open With...' submenu.

**Note** `onItemsOpened` is not called when items are opened using `showOpenFilePicker()`.

## Syntax
```js
puter.ui.onItemsOpened(handler)
```

## Parameters
#### `handler` (Function)
A function to execute after items are opened by user action.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        puter.ui.onItemsOpened(function(items){
            document.body.innerHTML = JSON.stringify(items);
        })
    </script>
</body>
</html>
```

<!--
File: UI/onLaunchedWithItems.md
-->

Specify a callback function to execute if the app is launched with items. `onLaunchedWithItems` will be called if one or more items are opened via double-clicking on items, right-clicking on items and choosing the app from the 'Open With...' submenu.

## Syntax
```js
puter.ui.onLaunchedWithItems(handler)
```

## Parameters
#### `handler` (Function)
A function to execute after items are opened by user action. The function will be passed an array of items. Each items is either a file or a directory.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        puter.ui.onLaunchedWithItems(function(items){
            document.body.innerHTML = JSON.stringify(items);
        })
    </script>
</body>
</html>
```

<!--
File: UI/onWindowClose.md
-->

Specify a function to execute when the window is about to close. For example the provided function will run right after  the 'X' button of the window has been pressed.

**Note** `onWindowClose` is not called when app is closed using `puter.exit()`.

## Syntax
```js
puter.ui.onWindowClose(handler)
```

## Parameters
#### `handler` (Function)
A function to execute when the window is going to close.


## Examples
```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        puter.ui.onWindowClose(function(){
            alert('Window is about to close!')
            puter.exit();
        })
    </script>
</body>
</html>
```

<!--
File: UI/parentApp.md
-->

Obtain a connection to the app that launched this app.

## Syntax
```js
puter.ui.parentApp()
```

## Parameters
`puter.ui.parentApp()` does not accept any parameters.

## Return value 
An [`AppConnection`](/Objects/AppConnection) to the parent, or null if there is no parent app.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        const parent = puter.ui.parentApp();
        if (!parent) {
            alert('This app was launched directly');
        } else {
            alert('This app was launched by another app');
            parent.postMessage("Hello, parent!");
        }
    </script>
</body>
</html>
```


<!--
File: UI/setMenubar.md
-->


Creates a menubar in the UI. The menubar is a horizontal bar at the top of the window that contains menus.

## Syntax

```js
puter.ui.setMenubar(options)
```

## Parameters

#### `options.items` (Array)

An array of menu items. Each item can be a menu or a menu item. Each menu item can have a label, an action, and a submenu.

#### `options.items.label` (String)

The label of the menu item.

#### `options.items.action` (Function)

A function to execute when the menu item is clicked.

#### `options.items.items` (Array)

An array of submenu items.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        puter.ui.setMenubar({
            items: [
                {
                    label: 'File',
                    items: [
                        {
                            label: 'Action',
                            action: () => {
                                alert('Action was clicked!');
                            }
                        },
                        {
                            label: 'Sub-Menu',
                            items: [
                                {
                                    label: 'Action 1',
                                    action: () => {
                                        alert('Action 1 was clicked!');
                                    }
                                },
                                {
                                    label: 'Action 2',
                                    action: () => {
                                        alert('Action 2 was clicked!');
                                    }
                                },
                            ]
                        },
                    ]
                },
            ]
        });
    </script>
</body>
</html>
```

<!--
File: UI/setWindowHeight.md
-->

Allows the user to dynamically set the height of the window.

## Syntax
```js
puter.ui.setWindowHeight(height)
```

## Parameters

#### `height` (Float)
The new height for this window. Must be a positive number. Minimum height is 200px, if a value less than 200 is provided, the height will be set to 200px.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // sets the height of the window to 800px
        puter.ui.setWindowHeight(800);
    </script>
</body>
</html>
```

<!--
File: UI/setWindowPosition.md
-->

Allows the user to set the position of the window.

## Syntax
```js
puter.ui.setWindowPosition(x, y)
```

## Parameters

#### `x` (Float)
The new x position for this window. Must be a positive number.

#### `y` (Float)
The new y position for this window. Must be a positive number.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // sets the position of the window to 100px from the left and 200px from the top
        puter.ui.setWindowPosition(100, 200);
    </script>
</body>
</html>
```

<!--
File: UI/setWindowSize.md
-->

Allows the user to dynamically set the width and height of the window.

## Syntax
```js
puter.ui.setWindowSize(width, height)
```

## Parameters

#### `width` (Float)
The new width for this window. Must be a positive number. Minimum width is 200px, if a value less than 200 is provided, the width will be set to 200px.

#### `height` (Float)
The new height for this window. Must be a positive number. Minimum height is 200px, if a value less than 200 is provided, the height will be set to 200px.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // sets the width and height of the window to 800px x 600px
        puter.ui.setWindowSize(800, 600);
    </script>
</body>
```


<!--
File: UI/setWindowTitle.md
-->

Allows the user to dynamically set the title of the window.

## Syntax
```js
puter.ui.setWindowTitle(title)
```

## Parameters

#### `title` (String)
The new title for this window.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        puter.ui.setWindowTitle('Fancy New Title');
    </script>
</body>
</html>
```

<!--
File: UI/setWindowWidth.md
-->

Allows the user to dynamically set the width of the window.

## Syntax
```js
puter.ui.setWindowWidth(width)
```

## Parameters

#### `width` (Float)
The new width for this window. Must be a positive number. Minimum width is 200px, if a value less than 200 is provided, the width will be set to 200px.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // sets the width of the window to 800px
        puter.ui.setWindowWidth(800);
    </script>
</body>
</html>
```

<!--
File: UI/setWindowX.md
-->

Sets the X position of the window.

## Syntax
```js
puter.ui.setWindowX(x)
```

## Parameters

#### `x` (Float) (Required)
The new x position for this window.


## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // sets the position of the window to 100px from the left
        puter.ui.setWindowX(100);
    </script>
</body>
```

<!--
File: UI/setWindowY.md
-->

Sets the y position of the window.

## Syntax
```js
puter.ui.setWindowY(y)
```

## Parameters

#### `y` (Float) (Required)
The new y position for this window.

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        // sets the position of the window to 200px from the top
        puter.ui.setWindowY(200);
    </script>
</body>
```

<!--
File: UI/showColorPicker.md
-->

Presents the user with a color picker dialog allowing them to select a color.

## Syntax
```js
puter.ui.showColorPicker()
puter.ui.showColorPicker(defaultColor)
puter.ui.showColorPicker(options)
```

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <script>
        puter.ui.showColorPicker().then((color)=>{
            document.body.style.backgroundColor = color;
        })
    </script>
</body>
</html>
```

<!--
File: UI/showDirectoryPicker.md
-->

Presents the user with a directory picker dialog allowing them to pick a directory from their Puter cloud storage.

## Syntax
```js
puter.ui.showDirectoryPicker()
puter.ui.showDirectoryPicker(options)
```

## Parameters

#### `options` (optional)
A set of key/value pairs that configure the directory picker dialog.
* `multiple` (Boolean): if set to `true`, user will be able to select multiple directories. Default is `false`.

## Return value 
A `Promise` that resolves to either one <code>FSItem</code> or an array of <code>FSItem</code> objects, depending on how many directories were selected by the user. 

## Examples

```html
<html>
<body>
    <script src="https://js.puter.com/v2/"></script>

    <button id="open-directory">Open directory</button>

    <h1 id="directory-name"></h1>
    <pre><code id="directory-content"></code></pre>

    <script>
        document.getElementById('open-directory').addEventListener('click', ()=>{
            puter.ui.showDirectoryPicker().then(async (directory)=>{
                // print directory name
                document.getElementById('directory-name').innerHTML = directory.name;
                // print directory content
                const children = await directory.readdir();
                if(children.length){
                    let content = '';
                    for(let child of children){
                        content += child.name + '\n';
                    }
                    document.getElementById('directory-content').innerText = content;
                }else{
                    document.getElementById('directory-content').innerText = 'Empty directory';
                }
            });
        });
    </script>
</body>
</html>
```
